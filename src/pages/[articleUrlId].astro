---
import { Markdown } from "astro-remote"

import AccordionInfoWrapper from "@/components/article/originals/AccordionInfoWrapper.astro"
import { ChatMessage } from "@/components/article/originals/ChatMessage"
import CodeBlockWrapper from "@/components/article/originals/CodeBlockWrapper.astro"
import { DownloadButton } from "@/components/article/originals/DownloadButton"
import InserterWrapper from "@/components/article/originals/InserterWrapper.astro"
import { Spotify } from "@/components/article/originals/iframe/Spotify"
import { YouTube } from "@/components/article/originals/iframe/YouTube"
import { HeightAdjustedImage } from "@/components/article/originals/image/HeightAdjustedImage"
import { ImageRow } from "@/components/article/originals/image/ImageRow"
import { ImageTextRow } from "@/components/article/originals/image/ImageTextRow"
import { Blockquote } from "@/components/article/standards/Blockquote"
import { Code } from "@/components/article/standards/Code"
import { Iframe } from "@/components/article/standards/Iframe"
import { Kbd } from "@/components/article/standards/Kbd"
import { LinkInArticle } from "@/components/article/standards/LinkInArticle"
import { Paragraph } from "@/components/article/standards/Paragraph"
import { Table } from "@/components/article/standards/Table"
import { H2 } from "@/components/article/standards/heading/H2"
import { H3 } from "@/components/article/standards/heading/H3"
import { H4 } from "@/components/article/standards/heading/H4"
import { Li } from "@/components/article/standards/list/Li"
import { Ul } from "@/components/article/standards/list/Ul"
import { ArticleImage } from "@/components/article/standards/media/ArticleImage"
import { Video } from "@/components/article/standards/media/Video"
import Layout from "@/components/layout/Layout.astro"
import { StaleContentWarning } from "@/components/templates/StaleContentWarning"
import { Hero } from "@/components/templates/hero/Hero"
import styles from "@/pages/_[articleUrlId].module.css"
import { getAllArticleUrlIds, getArticle } from "@/services/api"
import { getCurrentDateTime } from "@/utils/date"
import { formatArticleInfo, insertTableOfContents } from "@/utils/formatter"
import { isDefined } from "@/utils/isDefined"
import {
  calculateReadingTime,
  generateTableOfContentsFromMarkdown
} from "@/utils/table-of-contents"

/** 存在する記事のパス一覧をexportする */
export const getStaticPaths = async () => {
  const allArticleUrlIds = await getAllArticleUrlIds()

  return allArticleUrlIds.map(articleUrlId => ({
    params: {
      articleUrlId
    }
  }))
}

const { articleUrlId } = Astro.params

const article = await getArticle(articleUrlId)

if (!isDefined(article)) {
  throw new Error("記事情報が存在しません")
}

const articleInfo = await formatArticleInfo(article)
const tableOfContentsData = generateTableOfContentsFromMarkdown(article.body)
const tableOfContentsInsertedArticleBody = insertTableOfContents(article.body)
const minutesToRead = calculateReadingTime(article.body)
const articleDate = articleInfo.updatedAt
  ? new Date(articleInfo.updatedAt)
  : new Date(articleInfo.createdAt)
---

<Layout title={`${article.title} | 麩菓子の雑記帳`}>
  <div class={styles.articlePageMain}>
    <div class={styles.heroSp}>
      <Hero device="sp" {...articleInfo} />
    </div>

    <div class={styles.heroPc}>
      <Hero device="pc" {...articleInfo} />
    </div>

    <div class={styles.body}>
      <StaleContentWarning articleDate={articleDate} client:load />

      <Markdown
        components={{
          h2: H2,
          h3: H3,
          h4: H4,
          p: Paragraph,
          a: LinkInArticle,
          img: ArticleImage,
          ArticleImage,
          code: Code,
          video: Video,
          ul: Ul,
          li: Li,
          iframe: Iframe,
          table: Table,
          blockquote: Blockquote,
          ImageRow,
          ImageTextRow,
          Inserter: InserterWrapper,
          DownloadButton,
          YouTube,
          CodeBlock: CodeBlockWrapper,
          HeightAdjustedImage,
          Spotify,
          kbd: Kbd,
          AccordionInfo: AccordionInfoWrapper,
          ChatMessage
        }}
        content={tableOfContentsInsertedArticleBody}
        sanitize={{
          allowComponents: true
        }}
      />

      <p class={styles.built}>{`この記事は ${getCurrentDateTime()} にビルドされました`}</p>
    </div>
    {/* TODO: コメントエリア */}
  </div>

  <toc-variable-bridge data-minutestoread={minutesToRead}></toc-variable-bridge>
  <toc-variable-bridge data-value={JSON.stringify(tableOfContentsData)}></toc-variable-bridge>

  <script>
    import { CUSTOM_EVENT_ACTIVE_HEADING_CHANGE } from "@/constants/event"
    import { isDefined } from "@/utils/isDefined"
    import { minutesToReadAtom } from "@/stores/minutes-to-read"
    import { tableOfContentsAtom } from "@/stores/table-of-contents"

    /**
     * IntersectionObserverを利用して、スクロール位置に応じてアクティブな見出しを取得する
     * 参考: https://qiita.com/iwmy/items/7e557c7777c927d1bfaa
     */
    document.addEventListener("DOMContentLoaded", () => {
      const relatedHeadingElements = document.querySelectorAll(
        "h1, h1 ~ *, h2, h2 ~ *, h3, h3 ~ *, h4, h4 ~ *"
      )

      const observer = new IntersectionObserver(
        entries => {
          const intersectingHeading = entries.find(heading => heading.isIntersecting)
          if (!intersectingHeading) return

          const activeHeadingId = intersectingHeading.target.id // #は含まれない

          if (activeHeadingId === "") {
            return
          }

          const event = new CustomEvent(CUSTOM_EVENT_ACTIVE_HEADING_CHANGE, {
            detail: `#${activeHeadingId}`
          })
          window.dispatchEvent(event)
        },
        {
          rootMargin: "-10% 0px -90%"
        }
      )

      relatedHeadingElements.forEach(element => {
        observer.observe(element)
      })
    })

    /**
     * コンポーネントスクリプト内の変数をscriptタグから参照するためにカスタム要素を定義して値を橋渡しする (define:varsを利用するよりパフォーマンス的に有利)
     * @see: https://docs.astro.build/ja/guides/client-side-scripts/#%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%83%9E%E3%82%BF%E3%83%BC%E5%A4%89%E6%95%B0%E3%82%92%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AB%E6%B8%A1%E3%81%99
     */
    class TocVariableBridge extends HTMLElement {
      constructor() {
        super()

        const { value: tableOfContentsData, minutestoread } = this.dataset

        if (isDefined(minutestoread)) {
          minutesToReadAtom.set(Number(minutestoread))
        }

        if (isDefined(tableOfContentsData)) {
          tableOfContentsAtom.set(JSON.parse(tableOfContentsData))
        }
      }
    }

    customElements.define("toc-variable-bridge", TocVariableBridge)
  </script>
</Layout>

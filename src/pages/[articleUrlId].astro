---
import Layout from "@/components/layout/Layout.astro"
import ArticleView from "@/components/views/ArticleView.astro"
import { CommentView } from "@/components/views/CommentView"
import RecentArticlesView from "@/components/views/RecentArticlesView.astro"
import { SameTagArticlesView } from "@/components/views/SameTagArticlesView"
import styles from "@/pages/_[articleUrlId].module.css"
import { getAllArticleUrlIdList, getArticle } from "@/services/api"
import { isDefined } from "@/utils"
import {
  calculateReadingTime,
  generateTableOfContentsFromMarkdown
} from "@/utils/table-of-contents"

/** 存在する記事のパス一覧をexportする */
export const getStaticPaths = async () => {
  const allArticleUrlIdList = await getAllArticleUrlIdList()

  return allArticleUrlIdList.map(articleUrlId => ({
    params: {
      articleUrlId
    }
  }))
}

const { articleUrlId } = Astro.params

const article = await getArticle(articleUrlId)

if (!isDefined(article)) {
  throw new Error("記事情報が存在しません")
}

const tableOfContentsData = generateTableOfContentsFromMarkdown(article.body)
const minutesToRead = calculateReadingTime(article.body)
---

<Layout title={`${article.title} | 麩菓子の雑記帳`}>
  <section class={styles.articlePageMain}>
    <ArticleView article={article} />
  </section>

  <div class={styles.additionalContents}>
    <section>
      <CommentView articleUrlId={articleUrlId} client:load />
    </section>

    <section>
      <SameTagArticlesView articleUrlId={articleUrlId} client:load />
    </section>

    <section>
      <RecentArticlesView />
    </section>
  </div>

  <toc-variable-bridge data-minutestoread={minutesToRead}></toc-variable-bridge>
  <toc-variable-bridge data-value={JSON.stringify(tableOfContentsData)}></toc-variable-bridge>

  <script>
    import { isDefined, isValidString } from "@/utils"
    import { minutesToReadAtom } from "@/stores/minutes-to-read"
    import { tableOfContentsAtom } from "@/stores/table-of-contents"
    import { activeHeadingAnchorLinkAtom } from "@/stores/active-heading-anchor-link"

    /**
     * IntersectionObserverを利用して、スクロール位置に応じてアクティブな見出しを取得する
     * 参考: https://qiita.com/iwmy/items/7e557c7777c927d1bfaa
     */
    document.addEventListener("DOMContentLoaded", () => {
      const relatedHeadingElements = document.querySelectorAll(
        "h1, h1 ~ *, h2, h2 ~ *, h3, h3 ~ *, h4, h4 ~ *"
      )

      const observer = new IntersectionObserver(
        entries => {
          const intersectingHeading = entries.find(heading => heading.isIntersecting)
          if (!intersectingHeading) return

          const activeHeadingId = intersectingHeading.target.id // #は含まれない

          if (!isValidString(activeHeadingId)) {
            return
          }

          activeHeadingAnchorLinkAtom.set(`#${activeHeadingId}`)
        },
        {
          rootMargin: "-10% 0px -90%"
        }
      )

      relatedHeadingElements.forEach(element => {
        observer.observe(element)
      })
    })

    /**
     * コンポーネントスクリプト内の変数をscriptタグから参照するためにカスタム要素を定義して値を橋渡しする (define:varsを利用するよりパフォーマンス的に有利)
     * @see: https://docs.astro.build/ja/guides/client-side-scripts/#%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%83%9E%E3%82%BF%E3%83%BC%E5%A4%89%E6%95%B0%E3%82%92%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AB%E6%B8%A1%E3%81%99
     */
    class TocVariableBridge extends HTMLElement {
      constructor() {
        super()

        const { value: tableOfContentsData, minutestoread } = this.dataset

        if (isDefined(minutestoread)) {
          minutesToReadAtom.set(Number(minutestoread))
        }

        if (isDefined(tableOfContentsData)) {
          tableOfContentsAtom.set(JSON.parse(tableOfContentsData))
        }
      }
    }

    customElements.define("toc-variable-bridge", TocVariableBridge)
  </script>
</Layout>

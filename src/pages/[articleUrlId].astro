---
import { Markdown } from "astro-remote"

import ImageRow from "@/components/article/originals/image/ImageRow"
import LinkInArticle from "@/components/article/standards/LinkInArticle"
import Paragraph from "@/components/article/standards/Paragraph"
import H2 from "@/components/article/standards/heading/H2"
import H3 from "@/components/article/standards/heading/H3"
import Layout from "@/components/layout/Layout.astro"
import Hero from "@/components/templates/hero/Hero"
import styles from "@/pages/_[articleUrlId].module.css"
import { getAllArticleUrlIds, getArticle } from "@/services/api"
import { formatArticleInfo } from "@/utils/formatArticleInfo"
import { getCurrentDateTime } from "@/utils/getCurrentDateTime"
import { isDefined } from "@/utils/isDefined"

import InseterWrapper from "@/components/article/originals/InseterWrapper.astro"
import ImageTextRow from "@/components/article/originals/image/ImageTextRow"
import Code from "@/components/article/standards/Code"
import Iframe from "@/components/article/standards/Iframe"
import Li from "@/components/article/standards/list/Li"
import Ul from "@/components/article/standards/list/Ul"
import ArticleImage from "@/components/article/standards/media/ArticleImage"
import Video from "@/components/article/standards/media/Video"
import { CUSTOM_EVENT_ACTIVE_HEADING_CHANGE } from "@/constants/event"
import { SESSION_STORAGE_TABLE_OF_CONTENTS_KEY } from "@/constants/value"
import { generateTableOfContentsFromMarkdown } from "@/utils/generateTableOfContentsFromMarkdown"
import { insertTableOfContents } from "@/utils/insertTableOfContents"
import type { GetStaticPaths } from "astro"

/**
 * 存在する記事のパス一覧をexportする
 * @returns GetStaticPaths
 */
export const getStaticPaths: GetStaticPaths = async () => {
  const allArticleUrlIds = await getAllArticleUrlIds()

  return allArticleUrlIds.map(articleUrlId => ({
    params: {
      articleUrlId
    }
  }))
}

const { articleUrlId } = Astro.params

if (typeof articleUrlId !== "string") {
  throw new Error("記事のURL IDが不正です")
}

const article = await getArticle(articleUrlId)

if (!isDefined(article)) {
  throw new Error("記事情報が存在しません")
}

const heroProps = formatArticleInfo(article)
const tableOfContentsData = generateTableOfContentsFromMarkdown(article.body)
const tableOfContentsInsertedArticleBody = insertTableOfContents(article.body)
---

<script
  define:vars={{
    tableOfContentsData,
    SESSION_STORAGE_TABLE_OF_CONTENTS_KEY,
    CUSTOM_EVENT_ACTIVE_HEADING_CHANGE
  }}
>
  /** 目次コンポーネントがレンダリングされるのがscriptタグの実行後なためカスタムイベントを用いた目次データーの送信ができないのでsessionStorageを利用する */
  sessionStorage.setItem(SESSION_STORAGE_TABLE_OF_CONTENTS_KEY, JSON.stringify(tableOfContentsData))

  /**
   * IntersectionObserverを利用して、スクロール位置に応じてアクティブな見出しを取得する
   * 参考: https://qiita.com/iwmy/items/7e557c7777c927d1bfaa
   */
  document.addEventListener("DOMContentLoaded", () => {
    const relatedHeadingElements = document.querySelectorAll(
      "h1, h1 ~ *, h2, h2 ~ *, h3, h3 ~ *, h4, h4 ~ *"
    )

    const observer = new IntersectionObserver(
      entries => {
        const intersectingHeading = entries.find(heading => heading.isIntersecting)
        if (!intersectingHeading) return

        const activeHeadingId = intersectingHeading.target.id // #は含まれない

        if (activeHeadingId === "") {
          return
        }

        const event = new CustomEvent(CUSTOM_EVENT_ACTIVE_HEADING_CHANGE, {
          detail: `#${activeHeadingId}`
        })
        window.dispatchEvent(event)
      },
      {
        rootMargin: "-10% 0px -90%"
      }
    )

    relatedHeadingElements.forEach(element => {
      observer.observe(element)
    })
  })
</script>

<Layout title={`${article?.title} | 麩菓子の雑記帳`}>
  <div class={styles.articlePageMain}>
    <div class={styles.heroSp}>
      <Hero device="sp" {...heroProps} />
    </div>

    <div class={styles.heroPc}>
      <Hero device="pc" {...heroProps} />
    </div>

    <div class={styles.body}>
      <Markdown
        components={{
          h2: H2,
          h3: H3,
          p: Paragraph,
          a: LinkInArticle,
          img: ArticleImage,
          code: Code,
          video: Video,
          ul: Ul,
          li: Li,
          iframe: Iframe,
          ImageRow,
          ImageTextRow,
          Inserter: InseterWrapper
        }}
        content={tableOfContentsInsertedArticleBody}
        sanitize={{
          allowComponents: true
        }}
      />

      <p class={styles.built}>{`この記事は ${getCurrentDateTime()} にビルドされました`}</p>
    </div>
    {/* TODO: コメントエリア */}
  </div>
</Layout>

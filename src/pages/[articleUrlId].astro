---
import Layout from "@/components/layout/Layout.astro"
import ArticleView from "@/components/views/ArticleView.astro"
import { CommentView } from "@/components/views/CommentView"
import RecentArticlesView from "@/components/views/RecentArticlesView.astro"
import { SameTagArticlesView } from "@/components/views/SameTagArticlesView"
import styles from "@/pages/_[articleUrlId].module.css"
import { getAllArticleUrlIdList } from "@/services/api"
import { isDefined } from "@/utils"

/** 存在する記事のパス一覧をexportする */
export const getStaticPaths = async () => {
  const allArticleUrlIdList = await getAllArticleUrlIdList()

  return allArticleUrlIdList.map(articleUrlId => ({
    params: {
      articleUrlId
    }
  }))
}

const { articleUrlId } = Astro.params
const { article } = Astro.locals

if (!isDefined(article)) {
  throw new Error(`ミドルウェアで記事の取得に失敗している可能性があります`)
}
---

<Layout title={`${article.title} | 麩菓子の雑記帳`}>
  <section class={styles.articlePageMain}>
    <ArticleView article={article} />
  </section>

  <div class={styles.additionalContents}>
    <section>
      <CommentView articleUrlId={articleUrlId} client:idle />
    </section>

    <section>
      <SameTagArticlesView articleUrlId={articleUrlId} client:idle />
    </section>

    <section>
      <RecentArticlesView />
    </section>
  </div>

  <script>
    import { isValidString } from "@/utils"
    import { activeHeadingAnchorLinkAtom } from "@/stores/active-heading-anchor-link"

    /**
     * IntersectionObserverを利用して、スクロール位置に応じてアクティブな見出しを取得する
     * 参考: https://qiita.com/iwmy/items/7e557c7777c927d1bfaa
     */
    document.addEventListener("DOMContentLoaded", () => {
      const relatedHeadingElements = document.querySelectorAll(
        "h1, h1 ~ *, h2, h2 ~ *, h3, h3 ~ *, h4, h4 ~ *"
      )

      const observer = new IntersectionObserver(
        entries => {
          const intersectingHeading = entries.find(heading => heading.isIntersecting)
          if (!intersectingHeading) return

          const activeHeadingId = intersectingHeading.target.id // #は含まれない

          if (!isValidString(activeHeadingId)) {
            return
          }

          activeHeadingAnchorLinkAtom.set(`#${activeHeadingId}`)
        },
        {
          rootMargin: "-10% 0px -90%"
        }
      )

      relatedHeadingElements.forEach(element => {
        observer.observe(element)
      })
    })
  </script>
</Layout>

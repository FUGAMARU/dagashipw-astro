---
import { Markdown } from "astro-remote"

import AccordionInfoWrapper from "@/components/article/originals/AccordionInfoWrapper.astro"
import { ChatMessage } from "@/components/article/originals/ChatMessage"
import CodeBlockWrapper from "@/components/article/originals/CodeBlockWrapper.astro"
import { DownloadButton } from "@/components/article/originals/DownloadButton"
import { Spotify } from "@/components/article/originals/iframe/Spotify"
import { YouTube } from "@/components/article/originals/iframe/YouTube"
import { HeightAdjustedImage } from "@/components/article/originals/image/HeightAdjustedImage"
import { ImageRow } from "@/components/article/originals/image/ImageRow"
import { ImageTextRow } from "@/components/article/originals/image/ImageTextRow"
import { InlineArticleCard } from "@/components/article/originals/InlineArticleCard"
import Inserter from "@/components/article/originals/Inserter.astro"
import { TableWithoutHeader } from "@/components/article/originals/TableWithoutHeader"
import { Blockquote } from "@/components/article/standards/Blockquote"
import { Code } from "@/components/article/standards/Code"
import { H2 } from "@/components/article/standards/heading/H2"
import { H3 } from "@/components/article/standards/heading/H3"
import { H4 } from "@/components/article/standards/heading/H4"
import { Iframe } from "@/components/article/standards/Iframe"
import { Kbd } from "@/components/article/standards/Kbd"
import { LinkInArticle } from "@/components/article/standards/LinkInArticle"
import { Li } from "@/components/article/standards/list/Li"
import { Ul } from "@/components/article/standards/list/Ul"
import ArticleImage from "@/components/article/standards/media/ArticleImage.astro"
import { Video } from "@/components/article/standards/media/Video"
import { Paragraph } from "@/components/article/standards/Paragraph"
import { Table } from "@/components/article/standards/Table"
import { ResponsiveContainer } from "@/components/parts/common/ResponsiveContainer"
import { HeroPC } from "@/components/templates/hero/HeroPC"
import { HeroSP } from "@/components/templates/hero/HeroSP"
import { StaleContentWarning } from "@/components/templates/StaleContentWarning"
import { insertTableOfContentsAndAds } from "@/components/views/ArticleView.helpers"
import styles from "@/components/views/ArticleView.module.css"
import { isDefined } from "@/utils"
import { formatDateToString } from "@/utils/datetime"
import { convertMarkdownHeadingsToHtml } from "@/utils/markdown"
import { startSyncPipe } from "@/utils/pipe"

import type { CalculatedArticle } from "@/types/api"

/** Props */
type Props = {
  /** 記事情報 */
  article: CalculatedArticle
}

const { article } = Astro.props

const articleDate = isDefined(article.updatedAt)
  ? new Date(article.updatedAt)
  : new Date(article.createdAt)
const processedContent = startSyncPipe(article.body)
  .pipe(insertTableOfContentsAndAds) // 目次と広告を挿入
  .pipe(convertMarkdownHeadingsToHtml) // 見出しをコンポーネントに直接変換
  .value()
---

<div class={styles.articleView}>
  <ResponsiveContainer>
    {/* ArticleInfoBarの中でSWRでAPIを叩く必要があるのでclientディレクティブを付与している */}
    <HeroSP client:load {...article} />
  </ResponsiveContainer>

  <ResponsiveContainer isPC>
    {/* ArticleInfoBarの中でSWRでAPIを叩く必要があるのでclientディレクティブを付与している */}
    <HeroPC client:load {...article} />
  </ResponsiveContainer>

  <div class={styles.body}>
    <StaleContentWarning articleDate={articleDate} />

    <Markdown
      components={{
        h2: H2,
        h3: H3,
        h4: H4,
        H2,
        H3,
        H4,
        p: Paragraph,
        a: LinkInArticle,
        img: ArticleImage,
        ArticleImage,
        code: Code,
        video: Video,
        ul: Ul,
        li: Li,
        iframe: Iframe,
        table: Table,
        blockquote: Blockquote,
        ImageRow,
        ImageTextRow,
        Inserter,
        DownloadButton,
        YouTube,
        CodeBlock: CodeBlockWrapper,
        HeightAdjustedImage,
        Spotify,
        kbd: Kbd,
        AccordionInfo: AccordionInfoWrapper,
        ChatMessage,
        TableWithoutHeader,
        InlineArticleCard
      }}
      content={processedContent}
      sanitize={{
        allowComponents: true
      }}
    />

    <p class={styles.built}>
      {`この記事は ${formatDateToString(new Date(), "yyyy/MM/dd HH:mm:ss")} にビルドされました`}
    </p>
  </div>
</div>

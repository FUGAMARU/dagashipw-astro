---
import { LogoWrapper } from "@/components/layout/LogoWrapper"
import { Infobar } from "@/components/layout/sidebar/Infobar"
import { ShareButtons } from "@/components/layout/sidebar/ShareButtons"
import styles from "@/components/layout/sidebar/Sidebar.module.css"
import { SidebarItemWithTitle } from "@/components/layout/sidebar/SidebarItemWithTitle"
import { TableOfContentsWrapper } from "@/components/layout/sidebar/TableOfContentsWrapper"
import { Input } from "@/components/parts/input/Input"
import { SvgLoader } from "@/components/parts/svg/SvgLoader"
import {
  PC_TABLE_OF_CONTENTS_CONTAINER_ID,
  SIDEBAR_ID,
  SIDEBAR_SCROLLABLE_OVERLAY_ID
} from "@/constants/element"

const currentArticleTitle = "記事のタイトル" // TODO: 仮当て
const currentArticleUrl = "https://dagashi.pw" // TODO: 仮当て
---

<div class={styles.sidebarContainer}>
  <header class={styles.header}>
    <LogoWrapper isPC />
  </header>

  <div class={styles.main} id={SIDEBAR_ID}>
    {/* ビルド時点の日付で止まってしまうのとIPv4かどうか判定する必要があるのでCSRさせる */}
    <Infobar client:load />

    <SidebarItemWithTitle title="さがす">
      <Input client:load hasSearchIcon placeholder="キーワードを入力…" />
    </SidebarItemWithTitle>

    <div id={PC_TABLE_OF_CONTENTS_CONTAINER_ID}>
      <TableOfContentsWrapper client:only="react" />
    </div>

    <SidebarItemWithTitle title="この記事をシェアする">
      <ShareButtons
        client:load
        currentArticleTitle={currentArticleTitle}
        currentArticleUrl={currentArticleUrl}
      />
    </SidebarItemWithTitle>

    <SidebarItemWithTitle title="ミニゲーム - Color Junction">
      <div class={styles.colorJunction}>
        <iframe
          src="https://fugamaru.com/projects/ColorJunction/"
          height="264"
          width="244"
          frameborder="0"></iframe>
      </div>
    </SidebarItemWithTitle>

    <div class={styles.notbyai}>
      <SvgLoader name="notByAi" width={131} height={42} />
      <span class={styles.slogan}>このブログは人間が丹精込めて書いていますᕕ( ᐛ )ᕗ</span>
    </div>
  </div>

  <div class={styles.scrollableOverlay} id={SIDEBAR_SCROLLABLE_OVERLAY_ID}>
    <button class={styles.button}>
      <SvgLoader name="arrowDown" className={styles.icon} width={24} height={24} />
      <span class={styles.text}> スクロールしてもっと表示</span>
    </button>
  </div>
</div>

<script>
  import {
    PC_TABLE_OF_CONTENTS_CONTAINER_ID,
    SIDEBAR_ID,
    SIDEBAR_SCROLLABLE_OVERLAY_ID
  } from "@/constants/element"
  import { CUSTOM_EVENT_TABLE_OF_CONTENTS_HYDRATION_COMPLETE } from "@/constants/event"
  import { PAGE_PATH } from "@/constants/page"
  import { isList } from "typescanner"

  // PC表示時ブログ記事ページ以外ではサイドバーの目次は非表示にする
  document.addEventListener(
    "DOMContentLoaded",
    () => {
      const { pathname } = location

      if (!isList(pathname, Object.values(PAGE_PATH))) {
        return
      }

      const tableOfContentsPC = document.getElementById(PC_TABLE_OF_CONTENTS_CONTAINER_ID)

      if (tableOfContentsPC === null) {
        return
      }

      tableOfContentsPC.style.display = "none"
    },
    {
      once: true
    }
  )

  const switchSidebarScrollableOverlay = () => {
    const sidebar = document.getElementById(SIDEBAR_ID)
    const scrollableOverlay = document.getElementById(SIDEBAR_SCROLLABLE_OVERLAY_ID)

    if (sidebar === null || scrollableOverlay === null) {
      return
    }

    const isSidebarScrollable = sidebar.scrollHeight > sidebar.clientHeight
    scrollableOverlay.style.display = isSidebarScrollable ? "flex" : "none"
  }

  // PC表示時サイドバーがスクロール可能な状態であればオーバーレイを表示する
  window.addEventListener(
    CUSTOM_EVENT_TABLE_OF_CONTENTS_HYDRATION_COMPLETE,
    switchSidebarScrollableOverlay,
    {
      once: true
    }
  )

  window.addEventListener("resize", switchSidebarScrollableOverlay)
</script>

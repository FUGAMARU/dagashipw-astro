---
import { LogoWrapper } from "@/components/layout/LogoWrapper"
import { Infobar } from "@/components/layout/sidebar/Infobar"
import { ShareButtons } from "@/components/layout/sidebar/ShareButtons"
import styles from "@/components/layout/sidebar/Sidebar.module.css"
import { SidebarItemWithTitle } from "@/components/layout/sidebar/SidebarItemWithTitle"
import { TableOfContentsWrapper } from "@/components/layout/sidebar/TableOfContentsWrapper"
import { Input } from "@/components/parts/input/Input"
import { SvgLoader } from "@/components/parts/svg/SvgLoader"
import {
  PC_TABLE_OF_CONTENTS_CONTAINER_ID,
  SIDEBAR_ID,
  SIDEBAR_SCROLL_TO_BOTTOM_BUTTON_ID,
  SIDEBAR_SCROLLABLE_OVERLAY_ID
} from "@/constants/element"
import { PAGE_PATH } from "@/constants/page"
import clsx from "clsx"
import { isList } from "typescanner"

const currentArticleTitle = "記事のタイトル" // TODO: 仮当て
const currentArticleUrl = "https://dagashi.pw" // TODO: 仮当て

const { pathname } = Astro.url

/** 目次を表示するべきか (記事ページ以外では非表示) */
const shouldShowTableOfContents =
  !isList(pathname, Object.values(PAGE_PATH)) &&
  !pathname.startsWith(PAGE_PATH.ARTICLE_LIST_WITH_PAGE.replace("[page]", ""))
---

<div class={styles.sidebarContainer}>
  <header class={styles.header}>
    <LogoWrapper isPC />
  </header>

  <div class={styles.main} id={SIDEBAR_ID}>
    {/* ビルド時点の日付で止まってしまうのとIPv4かどうか判定する必要があるのでCSRさせる */}
    <Infobar client:load />

    <SidebarItemWithTitle title="さがす">
      <Input client:load hasSearchIcon placeholder="キーワードを入力…" />
    </SidebarItemWithTitle>

    <div
      class={clsx(styles.toc, !shouldShowTableOfContents && styles.Hidden)}
      id={PC_TABLE_OF_CONTENTS_CONTAINER_ID}
    >
      <TableOfContentsWrapper client:only="react" />
    </div>

    <SidebarItemWithTitle title="この記事をシェアする">
      <ShareButtons
        client:load
        currentArticleTitle={currentArticleTitle}
        currentArticleUrl={currentArticleUrl}
      />
    </SidebarItemWithTitle>

    <SidebarItemWithTitle title="ミニゲーム - Color Junction">
      <div class={styles.colorJunction}>
        <iframe
          src="https://fugamaru.com/projects/ColorJunction/"
          height="264"
          width="244"
          frameborder="0"></iframe>
      </div>
    </SidebarItemWithTitle>

    <div class={styles.notbyai}>
      <SvgLoader name="notByAi" width={131} height={42} />
      <span class={styles.slogan}>このブログは人間が丹精込めて書いていますᕕ( ᐛ )ᕗ</span>
    </div>
  </div>

  <div class={styles.scrollableOverlay} id={SIDEBAR_SCROLLABLE_OVERLAY_ID}>
    <button class={styles.button} id={SIDEBAR_SCROLL_TO_BOTTOM_BUTTON_ID}>
      <SvgLoader name="arrowDown" className={styles.icon} width={24} height={24} />
      <span class={styles.text}> スクロールしてもっと表示</span>
    </button>
  </div>
</div>

<script>
  import {
    SIDEBAR_ID,
    SIDEBAR_SCROLLABLE_OVERLAY_ID,
    SIDEBAR_SCROLL_TO_BOTTOM_BUTTON_ID
  } from "@/constants/element"
  import { isTocHydrationCompleteAtom } from "@/stores/is-toc-hydration-complete"
  import { isDefined } from "@/utils"
  import anime from "animejs"
  import { debounce } from "es-toolkit"

  /** サイドバーをスクロールした際のdebounceの待機時間 (ms) */
  const SIDEBAR_SCROLL_DEBOUNCE_WAIT = 100
  /** scrollableOverlayのフェードアニメーションのDuration (ms) */
  const SCROLLABLE_OVERLAY_FADE_DURATION = 200

  const sidebar = document.getElementById(SIDEBAR_ID)
  const scrollableOverlay = document.getElementById(SIDEBAR_SCROLLABLE_OVERLAY_ID)

  /** サイドバーがスクロール可能な状態であればオーバーレイを表示する / スクロール不可能な状態であれば非表示にする */
  const switchSidebarScrollableOverlay = () => {
    if (!isDefined(sidebar) || !isDefined(scrollableOverlay)) {
      return
    }

    const isSidebarScrollable = sidebar.scrollHeight > sidebar.clientHeight
    scrollableOverlay.style.display = isSidebarScrollable ? "flex" : "none"
  }

  // PC表示時サイドバーがスクロール可能な状態であればオーバーレイを表示する / スクロール不可能な状態であれば非表示にする
  isTocHydrationCompleteAtom.subscribe(isTocHydrationComplete => {
    if (!isTocHydrationComplete) {
      return
    }

    switchSidebarScrollableOverlay()
  })

  // ウィンドウリサイズ時にサイドバーがスクロール可能な状態であればオーバーレイを表示する / スクロール不可能な状態であれば非表示にする
  window.addEventListener("resize", switchSidebarScrollableOverlay)

  // サイドバーを一番下までスクロールしたらオーバーレイを非表示にする / 少し上に戻ったら再度表示する
  sidebar?.addEventListener(
    "scroll", // TODO: scrollendイベントをSafariがサポートするようになったら置き換えたい 参考: https://qiita.com/degudegu2510/items/586d2713c30a3ef9b312
    debounce(() => {
      if (!isDefined(sidebar) || !isDefined(scrollableOverlay)) {
        return
      }

      const { scrollHeight, clientHeight, scrollTop } = sidebar
      const isScrollBottom = Math.abs(scrollHeight - clientHeight - scrollTop) < 1 // scrollTopに多少の誤差があるので1pxの誤差を許容する

      const timeline = anime.timeline({
        easing: "linear", // フェードアニメーションの場合に最も適切なイージングはlinearなので定数化しない
        duration: SCROLLABLE_OVERLAY_FADE_DURATION
      })

      if (isScrollBottom) {
        timeline.add({
          targets: scrollableOverlay,
          opacity: 0,
          complete: () => {
            scrollableOverlay.style.display = "none"
          }
        })
        return
      }

      scrollableOverlay.style.display = "flex"
      timeline.add({
        targets: scrollableOverlay,
        opacity: 1
      })
    }, SIDEBAR_SCROLL_DEBOUNCE_WAIT)
  )

  // scrollableOverlayのボタンをクリックしたらサイドバーを一番下までスクロールする
  const sidebarScrollToBottomButton = document.getElementById(SIDEBAR_SCROLL_TO_BOTTOM_BUTTON_ID)
  sidebarScrollToBottomButton?.addEventListener("click", () => {
    if (!isDefined(sidebar)) {
      return
    }

    sidebar.scrollTo({
      top: sidebar.scrollHeight,
      behavior: "smooth"
    })
  })
</script>

---
import "@/styles/global.css"

import { SEO } from "astro-seo"

import { Footer } from "@/components/layout/Footer"
import { createArticleSchema, createDefaultSchema } from "@/components/layout/Layout.helpers"
import styles from "@/components/layout/Layout.module.css"
import { LogoWrapper } from "@/components/layout/LogoWrapper"
import Sidebar from "@/components/layout/sidebar/Sidebar.astro"
import { ResponsiveContainer } from "@/components/parts/common/ResponsiveContainer"
import { SvgLoader } from "@/components/parts/svg/SvgLoader"
import { UMAMI_SCRIPT_SRC, UMAMI_WEBSITE_ID } from "@/constants/env"
import { DEFAULT_OGP_IMAGE_FILENAME } from "@/constants/value"
import { isDefined } from "@/utils"

/** Props */
type Props = {
  /** ページタイトル */
  title: string
}

const { title } = Astro.props
const { article } = Astro.locals
const currentUrl = Astro.url.href

const isArticlePage = isDefined(article)

if (!isDefined(Astro.site)) {
  throw new Error("Astroの設定ファイルにてsiteの設定がされていません")
}

const siteUrl = Astro.site.href
const description = isArticlePage ? article.bodyBeginningParagraph : "趣味全開の個人的備忘録"
const ogImageUrl = isArticlePage
  ? article.originalThumbnailUrl // OGP用なので軽量化画像はあえて使用していない
  : new URL(DEFAULT_OGP_IMAGE_FILENAME, Astro.site).href

const schema = isDefined(article)
  ? createArticleSchema(title, description, ogImageUrl, currentUrl, article)
  : createDefaultSchema(siteUrl)
---

<html lang="ja">
  <head>
    <meta charset="utf-8" />
    <link href="/favicon.ico" rel="icon" />
    <SEO
      canonical={isArticlePage ? currentUrl : siteUrl}
      description={description}
      extend={{
        link: [{ rel: "icon", href: "/favicon.ico" }],
        meta: [
          {
            name: "viewport",
            content: "width=device-width"
          },
          {
            name: "generator",
            content: Astro.generator
          },
          {
            name: "theme-color",
            content: "#545454"
          }
        ]
      }}
      openGraph={{
        basic: {
          title,
          type: isArticlePage ? "article" : "website",
          image: ogImageUrl,
          url: currentUrl
        },
        optional: {
          siteName: "麩菓子の雑記帳",
          description,
          locale: "ja_JP"
        }
      }}
      title={title}
      twitter={{
        card: "summary_large_image",
        title,
        description,
        image: ogImageUrl
      }}
    />

    {
      isDefined(schema) && (
        <script is:inline set:html={JSON.stringify(schema)} type="application/ld+json" />
      )
    }
  </head>
  <body>
    <div class={styles.mainContent}>
      <div class={styles.inner}>
        <ResponsiveContainer>
          <header class={styles.header}>
            <LogoWrapper isPC={false} />
          </header>
        </ResponsiveContainer>

        <main class={styles.main}>
          <slot />
        </main>

        <aside class={styles.sidebar}>
          <Sidebar />
        </aside>
      </div>
    </div>

    <footer class={styles.footerContainer}>
      {/* 年の部分を最新化したいのでCSRもさせる */}
      <Footer client:idle />
    </footer>

    <ResponsiveContainer isPC>
      <div class={styles.backgroundPattern}>
        <SvgLoader name="background" />
        <div class={styles.overlay}></div>
      </div>
    </ResponsiveContainer>

    {
      import.meta.env.PROD && (
        <script data-website-id={UMAMI_WEBSITE_ID} src={UMAMI_SCRIPT_SRC} type="text/partytown"></script>

        <script>
          ;(() => {
            const name = "outbound-link-click"
            document.querySelectorAll("a").forEach(a => {
              if (a.host !== window.location.host && !a.getAttribute("data-umami-event")) {
                a.setAttribute("data-umami-event", name)
                a.setAttribute("data-umami-event-url", a.href)
              }
            })
          })()
        </script>
      )
    }

  </body>
</html>
